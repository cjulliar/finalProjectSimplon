name: CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Déployer en production'
        required: true
        default: 'false'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Installer les dépendances pour les tests
        pip install pytest pytest-cov httpx flake8 pandas openpyxl
        pip install -e .
    
    - name: Create test directories and files
      run: |
        mkdir -p docs data
        python3 tests/run_all_tests.py
    
    - name: Lint with flake8
      run: |
        # Utiliser une configuration plus souple pour flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test API
      run: |
        # Configurer un utilisateur administrateur pour les tests
        python3 src/scripts/setup_admin.py --username testadmin --password testpassword
        
        # Démarrer l'API en arrière-plan
        python3 src/scripts/run_api.py &
        # Attendre que l'API démarre
        sleep 5
        # Vérifier que l'API est en ligne
        curl http://127.0.0.1:8000/health || exit 1
        
        # Tester l'authentification de l'API
        TOKEN=$(curl -s -X POST http://127.0.0.1:8000/api/token -d "username=testadmin&password=testpassword" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
        if [ -z "$TOKEN" ]; then
          echo "Échec de l'authentification"
          exit 1
        fi
        
        # Tester l'accès aux données avec le token
        curl -s -H "Authorization: Bearer $TOKEN" http://127.0.0.1:8000/api/users/me | grep testadmin || exit 1
        
        # Tuer l'API
        pkill -f "python3 src/scripts/run_api.py" || true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    
    # Configuration de Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    # Une autre méthode pour installer Docker Compose
    - name: Set up Docker Compose
      uses: ndeloof/install-compose-action@v0.0.1
      with:
        version: v2.23.3
    
    - name: Build Docker images
      run: |
        docker compose version
        docker compose build

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup admin for staging
      run: |
        # Générer un mot de passe aléatoire pour l'administrateur
        python3 src/scripts/setup_admin.py --username admin --output admin_credentials.txt
        
        # Sauvegarder les informations d'identification comme artefact
        mkdir -p ./credentials
        mv admin_credentials.txt ./credentials/
    
    - name: Upload credentials as artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-credentials
        path: ./credentials/
        retention-days: 5
    
    - name: Deploy to staging
      run: echo "Deploying to staging environment (simulation)"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || github.event.inputs.deploy_to_production == 'true'
    # environment:
    #   name: production
    #   url: https://your-production-url.com
    concurrency: 
      group: production
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup admin for production
      run: |
        # Utiliser un mot de passe défini comme secret pour l'environnement de production
        python3 src/scripts/setup_admin.py --username admin --password ${{ secrets.ADMIN_PASSWORD || 'admin123' }}
    
    - name: Deploy to production
      run: echo "Deploying to production environment (simulation)"